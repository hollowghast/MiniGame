package graphics;

import dal.LocalFileAccess;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.JColorChooser;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import settings.FilesEnum;

public class ColorChangingDialog extends javax.swing.JDialog
{

    /**
     * Creates new form ColorChangingDialog
     */
    public ColorChangingDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelInput = new javax.swing.JPanel();
        lbPlayer = new javax.swing.JLabel();
        tfPlayerColor = new javax.swing.JTextField();
        lbPlayerColor = new javax.swing.JLabel();
        tfTextColor = new javax.swing.JTextField();
        panelButtons = new javax.swing.JPanel();
        onOK = new javax.swing.JButton();
        onCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        panelInput.setLayout(new java.awt.GridLayout(2, 2));

        lbPlayer.setText("Player:");
        panelInput.add(lbPlayer);

        tfPlayerColor.setEditable(false);
        tfPlayerColor.setBackground(new java.awt.Color(0, 0, 0));
        tfPlayerColor.setColumns(5);
        tfPlayerColor.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tfPlayerColorMouseClicked(evt);
            }
        });
        panelInput.add(tfPlayerColor);

        lbPlayerColor.setText("Text:");
        panelInput.add(lbPlayerColor);

        tfTextColor.setEditable(false);
        tfTextColor.setBackground(new java.awt.Color(0, 0, 0));
        tfTextColor.setColumns(5);
        tfTextColor.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tfTextColorMouseClicked(evt);
            }
        });
        panelInput.add(tfTextColor);

        getContentPane().add(panelInput, java.awt.BorderLayout.CENTER);

        panelButtons.setLayout(new java.awt.GridLayout(1, 2));

        onOK.setText("OK");
        onOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onOKActionPerformed(evt);
            }
        });
        panelButtons.add(onOK);

        onCancel.setText("Cancel");
        panelButtons.add(onCancel);

        getContentPane().add(panelButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfPlayerColorMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tfPlayerColorMouseClicked
    {//GEN-HEADEREND:event_tfPlayerColorMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1)
        {
            //open color chooser
            Color selCol = JColorChooser.showDialog(this, "Player Color", this.tfPlayerColor.getBackground());
            this.tfPlayerColor.setBackground(selCol);
        }
    }//GEN-LAST:event_tfPlayerColorMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        LocalFileAccess.XMLAccess.setFile(new File(FilesEnum.COLORS.getPath()));
        try
        {
            //read file
            LocalFileAccess.XMLAccess.XMLReader.read();
            
            //load color of player
            Color playerCol = Color.decode(
                    LocalFileAccess.XMLAccess.XMLReader
                            .getElement("Color", "Player", null, null)
                            .getValue().trim());
            this.tfPlayerColor.setBackground(playerCol);
            //load color of text
            Color textCol = Color.decode(
                    LocalFileAccess.XMLAccess.XMLReader
                            .getElement("Color", "Text", null, null)
                            .getValue().trim());
            this.tfTextColor.setBackground(textCol);
        } catch (IOException ex)
        {
            System.out.println("io exception");
            ex.printStackTrace();
        } catch (JDOMException ex)
        {
            System.out.println("jdom exception");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void tfTextColorMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tfTextColorMouseClicked
    {//GEN-HEADEREND:event_tfTextColorMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1)
        {
            //open color chooser
            Color selCol = JColorChooser.showDialog(this, "Text Color", this.tfTextColor.getBackground());
            this.tfTextColor.setBackground(selCol);
        }
    }//GEN-LAST:event_tfTextColorMouseClicked

    private void onOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onOKActionPerformed
    {//GEN-HEADEREND:event_onOKActionPerformed
        LocalFileAccess.XMLAccess.setFile(new File(FilesEnum.COLORS.getPath()));
        try
        {
            Element colorElement = LocalFileAccess.XMLAccess.XMLReader
                    .getElement("Color", "Player", null, null);
            
            //substring(2) to remove alpha
            String hexValOfNewColor = "#" + 
                    Integer.toHexString(tfPlayerColor.getBackground()
                            .getRGB()).substring(2);
            
            if(!hexValOfNewColor.equalsIgnoreCase(colorElement.getValue())){
                LocalFileAccess.XMLAccess.XMLWriter
                        .setValueFor(colorElement, hexValOfNewColor);
            }
            
            colorElement = LocalFileAccess.XMLAccess.XMLReader
                            .getElement("Color", "Text", null, null);
            hexValOfNewColor = "#" + Integer.toHexString(tfTextColor.getBackground().getRGB()).substring(2);
            
            if(!hexValOfNewColor.equalsIgnoreCase(colorElement.getValue())){
                LocalFileAccess.XMLAccess.XMLWriter.setValueFor(colorElement, hexValOfNewColor);
            }
            
            LocalFileAccess.XMLAccess.XMLWriter.writeCurrentDocument();
        } catch (JDOMException ex)
        {
            System.err.println("Error while writing new values to elements");
        }
        catch(IOException e){
            System.err.println(e.getMessage());
        }
        finally{
            this.setVisible(false);
        }
    }//GEN-LAST:event_onOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ColorChangingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ColorChangingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ColorChangingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ColorChangingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                ColorChangingDialog dialog = new ColorChangingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbPlayer;
    private javax.swing.JLabel lbPlayerColor;
    private javax.swing.JButton onCancel;
    private javax.swing.JButton onOK;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JPanel panelInput;
    private javax.swing.JTextField tfPlayerColor;
    private javax.swing.JTextField tfTextColor;
    // End of variables declaration//GEN-END:variables

}
